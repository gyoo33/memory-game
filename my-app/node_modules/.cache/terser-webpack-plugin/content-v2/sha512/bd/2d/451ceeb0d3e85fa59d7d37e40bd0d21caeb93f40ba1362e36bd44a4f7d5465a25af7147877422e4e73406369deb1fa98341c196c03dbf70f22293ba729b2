{"map":"{\"version\":3,\"sources\":[\"/Users/gracesmac/Desktop/dev/memory-game/my-app/src/components/Navbar/Navbar.js\",\"/Users/gracesmac/Desktop/dev/memory-game/my-app/src/components/Jumbotron/Jumbotron.js\",\"/Users/gracesmac/Desktop/dev/memory-game/my-app/src/components/Container/Container.js\",\"/Users/gracesmac/Desktop/dev/memory-game/my-app/src/components/Card/Card.js\",\"/Users/gracesmac/Desktop/dev/memory-game/my-app/src/components/Footer/Footer.js\",\"/Users/gracesmac/Desktop/dev/memory-game/my-app/src/App.js\",\"/Users/gracesmac/Desktop/dev/memory-game/my-app/src/serviceWorker.js\",\"/Users/gracesmac/Desktop/dev/memory-game/my-app/src/index.js\"],\"names\":[\"Navbar\",\"props\",\"react_default\",\"a\",\"createElement\",\"className\",\"href\",\"score\",\"topScore\",\"Jumbotron\",\"Container\",\"children\",\"Card\",\"onClick\",\"cardClicked\",\"id\",\"alt\",\"name\",\"src\",\"image\",\"Footer\",\"App\",\"state\",\"images\",\"shuffleImgArray\",\"i\",\"length\",\"j\",\"Math\",\"floor\",\"random\",\"_ref\",\"correctGuess\",\"newImgs\",\"_this$state\",\"_this\",\"newScore\",\"newTopScore\",\"max\",\"setState\",\"wrongGuess\",\"resetData\",\"map\",\"item\",\"Object\",\"objectSpread\",\"clicked\",\"guessedCorrectly\",\"newItem\",\"_this2\",\"this\",\"components_Navbar_Navbar\",\"components_Jumbotron_Jumbotron\",\"components_Container_Container\",\"components_Card_Card\",\"key\",\"components_Footer_Footer\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React from \\\"react\\\";\\n// import { Link } from \\\"react-router-dom\\\";\\nimport \\\"./Navbar.css\\\";\\n\\n// Depending on the current path, this component sets the \\\"active\\\" class on the appropriate navigation link item\\nconst Navbar = props => (\\n  <nav className=\\\"navbar\\\">\\n    <ul>\\n      <li className=\\\"brand\\\">\\n        <a href=\\\"/\\\">Clicky Game</a>\\n      </li>\\n      <li>\\n        {/* this is space for the message */}\\n        {\\\"Good Luck\\\"}\\n      </li>\\n      <li>\\n        Score: {props.score} | Top Score: {props.topScore}\\n      </li>\\n    </ul>\\n  </nav>\\n);\\n\\nexport default Navbar;\\n\",\"import React from \\\"react\\\";\\nimport \\\"./Jumbotron.css\\\";\\n\\nconst Jumbotron = () => (\\n  <div className=\\\"jumbotron text-center\\\">\\n    <h1>Memory Game</h1>\\n    <p>Click on an image to earn points, but don't click on any more than once!</p>\\n  </div>\\n);\\n\\nexport default Jumbotron;\\n\",\"import React from \\\"react\\\";\\nimport \\\"./Container.css\\\";\\n\\nconst Container = props => <main className=\\\"container\\\">{props.children}</main>;\\n\\nexport default Container;\\n\",\"import React from \\\"react\\\";\\nimport \\\"./Card.css\\\";\\n\\nconst Card = props => (\\n  <div\\n    className=\\\"card\\\" onClick={() => props.cardClicked(props.id)} >\\n    <div className=\\\"card-img\\\">\\n    <img alt={props.name} src={props.image} />\\n    </div>\\n  </div>\\n);\\n\\nexport default Card;\\n\",\"import React from \\\"react\\\";\\nimport \\\"./Footer.css\\\";\\n\\nconst Footer = () => (\\n  <footer className=\\\"footer\\\">\\n    <span>Memory Game</span>\\n  </footer>\\n);\\n\\nexport default Footer;\\n\",\"import React, { Component } from 'react';\\nimport Navbar from \\\"./components/Navbar\\\";\\nimport Jumbotron from \\\"./components/Jumbotron\\\";\\nimport Container from \\\"./components/Container\\\";\\nimport Card from \\\"./components/Card\\\";\\nimport Footer from \\\"./components/Footer\\\";\\nimport images from \\\"./allImages.json\\\";\\nimport \\\"./App.css\\\";\\n\\nclass App extends Component {\\n  // Setting this.state.friends to the friends json array\\n  state = {\\n    score: 0,\\n    topScore: 0,\\n    images\\n  };\\n\\n  shuffleImgArray = images => {\\n    for (let i = images.length - 1; i > 0; i--) {\\n      const j = Math.floor(Math.random() * (i + 1));\\n      [images[i], images[j]] = [images[j], images[i]];\\n    }\\n    return images;\\n  }\\n\\n  correctGuess = newImgs => {\\n    const { topScore, score } = this.state;\\n    const newScore = score + 1;\\n    const newTopScore = Math.max(newScore, topScore);\\n    this.setState({\\n      images: this.shuffleImgArray(newImgs),\\n      score: newScore,\\n      topScore: newTopScore\\n    })\\n  }\\n\\n  wrongGuess = images => {\\n    this.setState({\\n      images: this.resetData(images),\\n      score: 0\\n    });\\n  };\\n\\n  resetData = images => {\\n    const resetData = images.map(item => ({ ...item, clicked: false }));\\n    return this.shuffleImgArray(resetData);\\n  };\\n\\n  cardClicked = id => {\\n    let guessedCorrectly = false;\\n    const newImgs = this.state.images.map(item => {\\n      const newItem = { ...item };\\n      if (newItem.id === id) {\\n        if (!newItem.clicked) {\\n          newItem.clicked = true;\\n          guessedCorrectly = true;\\n        }\\n      }\\n      return newItem;\\n    });\\n    guessedCorrectly\\n      ? this.correctGuess(newImgs)\\n      : this.wrongGuess(newImgs);\\n  };\\n\\n  // Map over this.state.friends and render a FriendCard component for each friend object\\n  render() {\\n    return (\\n      <div>\\n        <Navbar score={this.state.score} topScore={this.state.topScore} />\\n        <Jumbotron />\\n        <Container>\\n          {this.state.images.map(item => (\\n            <Card\\n              key={item.id}\\n              id={item.id}\\n              cardClicked={this.cardClicked}\\n              image={item.image}\\n            />\\n          ))}\\n        </Container>\\n        <Footer />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA.\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      if (\\n        response.status === 404 ||\\n        response.headers.get('content-type').indexOf('javascript') === -1\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport \\\"./index.css\\\";\\nimport App from \\\"./App\\\";\\nimport * as serviceWorker from \\\"./serviceWorker\\\";\\n\\nReactDOM.render(<App />, document.getElementById(\\\"root\\\"));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,,,,,,,function(e){e.exports=[{id:1,name:\"bear\",image:\"/assets/images/bear.jpg\",clicked:!1},{id:2,name:\"bird\",image:\"/assets/images/bird.jpg\",clicked:!1},{id:3,name:\"cow\",image:\"/assets/images/cow.jpg\",clicked:!1},{id:4,name:\"deer\",image:\"/assets/images/deer.jpg\",clicked:!1},{id:5,name:\"dog\",image:\"/assets/images/dog.jpg\",clicked:!1},{id:6,name:\"elephant\",image:\"/assets/images/elephant.jpg\",clicked:!1},{id:7,name:\"flamingo\",image:\"/assets/images/flamingo.jpg\",clicked:!1},{id:8,name:\"fox\",image:\"/assets/images/fox.jpg\",clicked:!1},{id:9,name:\"koala\",image:\"/assets/images/koala.jpg\",clicked:!1},{id:10,name:\"owl\",image:\"/assets/images/owl.jpg\",clicked:!1},{id:11,name:\"sloth\",image:\"/assets/images/sloth.jpg\",clicked:!1},{id:12,name:\"whale\",image:\"/assets/images/whale.jpg\",clicked:!1}]},,,function(e,a,t){e.exports=t(29)},,,,,function(e,a,t){},,function(e,a,t){},,function(e,a,t){},,function(e,a,t){},,function(e,a,t){},,function(e,a,t){},,function(e,a,t){},,function(e,a,t){\"use strict\";t.r(a);var n=t(0),c=t.n(n),r=t(3),i=t.n(r),o=(t(15),t(1)),s=t(4),l=t(5),m=t(8),u=t(6),d=t(9),g=(t(17),function(e){return c.a.createElement(\"nav\",{className:\"navbar\"},c.a.createElement(\"ul\",null,c.a.createElement(\"li\",{className:\"brand\"},c.a.createElement(\"a\",{href:\"/\"},\"Clicky Game\")),c.a.createElement(\"li\",null,\"Good Luck\"),c.a.createElement(\"li\",null,\"Score: \",e.score,\" | Top Score: \",e.topScore)))}),f=(t(19),function(){return c.a.createElement(\"div\",{className:\"jumbotron text-center\"},c.a.createElement(\"h1\",null,\"Memory Game\"),c.a.createElement(\"p\",null,\"Click on an image to earn points, but don't click on any more than once!\"))}),p=(t(21),function(e){return c.a.createElement(\"main\",{className:\"container\"},e.children)}),h=(t(23),function(e){return c.a.createElement(\"div\",{className:\"card\",onClick:function(){return e.cardClicked(e.id)}},c.a.createElement(\"div\",{className:\"card-img\"},c.a.createElement(\"img\",{alt:e.name,src:e.image})))}),k=(t(25),function(){return c.a.createElement(\"footer\",{className:\"footer\"},c.a.createElement(\"span\",null,\"Memory Game\"))}),E=t(7),v=(t(27),function(e){function a(){var e,t;Object(s.a)(this,a);for(var n=arguments.length,c=new Array(n),r=0;r<n;r++)c[r]=arguments[r];return(t=Object(m.a)(this,(e=Object(u.a)(a)).call.apply(e,[this].concat(c)))).state={score:0,topScore:0,images:E},t.shuffleImgArray=function(e){for(var a=e.length-1;a>0;a--){var t=Math.floor(Math.random()*(a+1)),n=[e[t],e[a]];e[a]=n[0],e[t]=n[1]}return e},t.correctGuess=function(e){var a=t.state,n=a.topScore,c=a.score+1,r=Math.max(c,n);t.setState({images:t.shuffleImgArray(e),score:c,topScore:r})},t.wrongGuess=function(e){t.setState({images:t.resetData(e),score:0})},t.resetData=function(e){var a=e.map(function(e){return Object(o.a)({},e,{clicked:!1})});return t.shuffleImgArray(a)},t.cardClicked=function(e){var a=!1,n=t.state.images.map(function(t){var n=Object(o.a)({},t);return n.id===e&&(n.clicked||(n.clicked=!0,a=!0)),n});a?t.correctGuess(n):t.wrongGuess(n)},t}return Object(d.a)(a,e),Object(l.a)(a,[{key:\"render\",value:function(){var e=this;return c.a.createElement(\"div\",null,c.a.createElement(g,{score:this.state.score,topScore:this.state.topScore}),c.a.createElement(f,null),c.a.createElement(p,null,this.state.images.map(function(a){return c.a.createElement(h,{key:a.id,id:a.id,cardClicked:e.cardClicked,image:a.image})})),c.a.createElement(k,null))}}]),a}(n.Component));Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));i.a.render(c.a.createElement(v,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}],[[10,2,1]]]);","extractedComments":[]}