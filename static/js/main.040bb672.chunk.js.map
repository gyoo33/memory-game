{"version":3,"sources":["components/Navbar/Navbar.js","components/Jumbotron/Jumbotron.js","components/Container/Container.js","components/Card/Card.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","score","topScore","Jumbotron","Container","children","Card","onClick","cardClicked","id","alt","name","src","image","Footer","App","state","images","shuffleImgArray","i","length","j","Math","floor","random","_ref","correctGuess","newImgs","_this$state","_this","newScore","newTopScore","max","setState","wrongGuess","resetData","map","item","Object","objectSpread","clicked","guessedCorrectly","newItem","_this2","this","components_Navbar_Navbar","components_Jumbotron_Jumbotron","components_Container_Container","components_Card_Card","key","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wnCAsBeA,SAjBA,SAAAC,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SACZH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KAAR,gBAEFJ,EAAAC,EAAAC,cAAA,UAEG,aAEHF,EAAAC,EAAAC,cAAA,oBACUH,EAAMM,MADhB,iBACqCN,EAAMO,cCNlCC,SAPG,kBAChBP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,wFCDWM,SAFG,SAAAT,GAAK,OAAIC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAaJ,EAAMU,YCS/CC,SATF,SAAAX,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OACEC,UAAU,OAAOQ,QAAS,kBAAMZ,EAAMa,YAAYb,EAAMc,MACxDb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACfH,EAAAC,EAAAC,cAAA,OAAKY,IAAKf,EAAMgB,KAAMC,IAAKjB,EAAMkB,YCEtBC,SANA,kBACblB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,qCCkFWiB,oNA5EbC,MAAQ,CACNf,MAAO,EACPC,SAAU,EACVe,YAGFC,gBAAkB,SAAAD,GAChB,IAAK,IAAIE,EAAIF,EAAOG,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC1C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADAM,EAEjB,CAACR,EAAOI,GAAIJ,EAAOE,IAA3CF,EAAOE,GAFkCM,EAAA,GAE9BR,EAAOI,GAFuBI,EAAA,GAI5C,OAAOR,KAGTS,aAAe,SAAAC,GAAW,IAAAC,EACIC,EAAKb,MAAzBd,EADgB0B,EAChB1B,SACF4B,EAFkBF,EACN3B,MACO,EACnB8B,EAAcT,KAAKU,IAAIF,EAAU5B,GACvC2B,EAAKI,SAAS,CACZhB,OAAQY,EAAKX,gBAAgBS,GAC7B1B,MAAO6B,EACP5B,SAAU6B,OAIdG,WAAa,SAAAjB,GACXY,EAAKI,SAAS,CACZhB,OAAQY,EAAKM,UAAUlB,GACvBhB,MAAO,OAIXkC,UAAY,SAAAlB,GACV,IAAMkB,EAAYlB,EAAOmB,IAAI,SAAAC,GAAI,OAAAC,OAAAC,EAAA,EAAAD,CAAA,GAAUD,EAAV,CAAgBG,SAAS,MAC1D,OAAOX,EAAKX,gBAAgBiB,MAG9B3B,YAAc,SAAAC,GACZ,IAAIgC,GAAmB,EACjBd,EAAUE,EAAKb,MAAMC,OAAOmB,IAAI,SAAAC,GACpC,IAAMK,EAAOJ,OAAAC,EAAA,EAAAD,CAAA,GAAQD,GAOrB,OANIK,EAAQjC,KAAOA,IACZiC,EAAQF,UACXE,EAAQF,SAAU,EAClBC,GAAmB,IAGhBC,IAETD,EACIZ,EAAKH,aAAaC,GAClBE,EAAKK,WAAWP,4EAIb,IAAAgB,EAAAC,KACP,OACEhD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+C,EAAD,CAAQ5C,MAAO2C,KAAK5B,MAAMf,MAAOC,SAAU0C,KAAK5B,MAAMd,WACtDN,EAAAC,EAAAC,cAACgD,EAAD,MACAlD,EAAAC,EAAAC,cAACiD,EAAD,KACGH,KAAK5B,MAAMC,OAAOmB,IAAI,SAAAC,GAAI,OACzBzC,EAAAC,EAAAC,cAACkD,EAAD,CACEC,IAAKZ,EAAK5B,GACVA,GAAI4B,EAAK5B,GACTD,YAAamC,EAAKnC,YAClBK,MAAOwB,EAAKxB,WAIlBjB,EAAAC,EAAAC,cAACoD,EAAD,cAxEUC,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.040bb672.chunk.js","sourcesContent":["import React from \"react\";\n// import { Link } from \"react-router-dom\";\nimport \"./Navbar.css\";\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nconst Navbar = props => (\n  <nav className=\"navbar\">\n    <ul>\n      <li className=\"brand\">\n        <a href=\"/\">Clicky Game</a>\n      </li>\n      <li>\n        {/* this is space for the message */}\n        {\"Good Luck\"}\n      </li>\n      <li>\n        Score: {props.score} | Top Score: {props.topScore}\n      </li>\n    </ul>\n  </nav>\n);\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./Jumbotron.css\";\n\nconst Jumbotron = () => (\n  <div className=\"jumbotron text-center\">\n    <h1>Memory Game</h1>\n    <p>Click on an image to earn points, but don't click on any more than once!</p>\n  </div>\n);\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./Container.css\";\n\nconst Container = props => <main className=\"container\">{props.children}</main>;\n\nexport default Container;\n","import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = props => (\n  <div\n    className=\"card\" onClick={() => props.cardClicked(props.id)} >\n    <div className=\"card-img\">\n    <img alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\nexport default Card;\n","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => (\n  <footer className=\"footer\">\n    <span>Memory Game</span>\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Container from \"./components/Container\";\nimport Card from \"./components/Card\";\nimport Footer from \"./components/Footer\";\nimport images from \"./allImages.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    score: 0,\n    topScore: 0,\n    images\n  };\n\n  shuffleImgArray = images => {\n    for (let i = images.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [images[i], images[j]] = [images[j], images[i]];\n    }\n    return images;\n  }\n\n  correctGuess = newImgs => {\n    const { topScore, score } = this.state;\n    const newScore = score + 1;\n    const newTopScore = Math.max(newScore, topScore);\n    this.setState({\n      images: this.shuffleImgArray(newImgs),\n      score: newScore,\n      topScore: newTopScore\n    })\n  }\n\n  wrongGuess = images => {\n    this.setState({\n      images: this.resetData(images),\n      score: 0\n    });\n  };\n\n  resetData = images => {\n    const resetData = images.map(item => ({ ...item, clicked: false }));\n    return this.shuffleImgArray(resetData);\n  };\n\n  cardClicked = id => {\n    let guessedCorrectly = false;\n    const newImgs = this.state.images.map(item => {\n      const newItem = { ...item };\n      if (newItem.id === id) {\n        if (!newItem.clicked) {\n          newItem.clicked = true;\n          guessedCorrectly = true;\n        }\n      }\n      return newItem;\n    });\n    guessedCorrectly\n      ? this.correctGuess(newImgs)\n      : this.wrongGuess(newImgs);\n  };\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <div>\n        <Navbar score={this.state.score} topScore={this.state.topScore} />\n        <Jumbotron />\n        <Container>\n          {this.state.images.map(item => (\n            <Card\n              key={item.id}\n              id={item.id}\n              cardClicked={this.cardClicked}\n              image={item.image}\n            />\n          ))}\n        </Container>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}